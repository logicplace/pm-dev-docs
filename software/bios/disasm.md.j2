{% asm "epson" -%}
DEFSECT ".bios", CODE AT 0000H
SECT ".bios"

	DW reset_vector
	DW reset2
	DW reset2
	DW prc_frame_copy_irq
	DW prc_render_irq
	DW timer_2h_underflow_irq
	DW timer_2l_underflow_irq
	DW timer_1h_underflow_irq
	DW timer_1l_underflow_irq
	DW timer_3h_underflow_irq
	DW timer_3_cmp_irq
	DW timer_32hz_irq
	DW timer_8hz_irq
	DW timer_2hz_irq
	DW timer_1hz_irq
	DW ir_rx_irq
	DW shake_irq
	DW reset2
	DW reset2
	DW cart_ejected_irq
	DW cartridge_irq
	DW key_power_irq
	DW key_right_irq
	DW key_left_irq
	DW key_down_irq
	DW key_up_irq
	DW key_c_irq
	DW key_b_irq
	DW key_a_irq
	DW unknown_irq0
	DW unknown_irq1
	DW unknown_irq2
	DW 0FFF1h
	DW suspend_system
	DW sleep
	DW sleep_with_display
	DW shutdown
	DW unknown_eject0
	DW default_contrast
	DW change_contrast
	DW apply_default_contrast
	DW get_default_contrast
	DW set_temp_contast
	DW lcd_on
	DW init_lcd
	DW lcd_off
	DW ena_ram_vec
	DW dis_ram_vec
	DW dis_irq_13
	DW ena_irq_13
	DW unknown_eject1
	DW unknown_eject2
	DW dev_card0
	DW dev_card1
	DW unknown_eject3
	DW dis_cart_eject
	DW unknown_eject4
	DW inc_cpu_speed
	DW recover_inc_cpu
	DW cart_off_update0
	DW cart_off_update1
	DW cart_detect
	DW read_structure
	DW set_prc_rate
	DW get_prc_rate
	DW test_cart_type
	DW dev_read_ids
	DW dev_reset
	DW dev_program_byte
	DW dev_erase_sector
	DW dev_unlock_page_register
	DW dev_sel_bank
	DW dev_cmd_c9
	DW dev_prepare_readout
	DW dev_sel_game
	DW 0000h
	DW ir_pulse
	
	hdr_nintendo EQU 21A4h
	
reset_vector:
	LD EP, #00h
	LD BR, #20h
	LD [BR:08h], #02h
	OR [BR:08h], #01h
	LD [BR:00h], #7Ch
	LD [BR:02h], #00h
reset2:
	LD SC, #0C0h
	LD SP, #2000h
	CARL initregs
	LD [BR:80h], A
	CARL set_fast_speed
	LD NB, #01h
	JRS loc_0x00BE
loc_0x00BE:
	LD A, [BR:52h]
	LD [14E1h], A
	OR [BR:00h], #03h
	LD [BR:01h], #30h
	OR [BR:02h], #0C0h
	CARL init_io
	LD [BR:80h], #02h
	LD [BR:81h], #09h
	LD IX, #1830h
	LD [02082h], IX
	LD [BR:84h], #00h
	LD [BR:85h], B
	LD [BR:86h], B
	LD [BR:87h], B
	LD [BR:88h], B
	LD [BR:89h], B
	CARL loc_0x0B08
	CARL loc_0x0BCA
	LD [BR:28h], #02h
	LD SC, #80h
	LD [BR:0FEh], #0E3h
	LD H, #0B0h
loop_from_B0_to_B8:
	LD B, #60h
	LD [BR:0FEh], H
	LD [BR:0FEh], #10h
	LD [BR:0FEh], #00h
clear_96_vertical_lines:
	LD [BR:0FFh], #00h
	DJR NZ, clear_96_vertical_lines
	INC H
	CP H, #0B8h
	JRS NZ, loop_from_B0_to_B8
	CARL apply_default_contrast1
	XOR A, A
	CARL init_display1
	CARL decode_picture
	BIT [BR:53h], #02h
	JRS Z, loc_0x0120
	JRL reset3
; ----------------------
loc_0x0120:
	OR [BR:10h], #10h
	LD B, #32h
loc_0x0125:
	DJR NZ, loc_0x0125
	AND [BR:10h], #0EFh
	BIT [BR:10h], #20h
	JRS Z, loc_0x0132
	CARL loc_0x0D87
loc_0x0132:
	JRL flash_05CF
; ----------------------
nintendo_check:
	LD SP, #2000h
	LD B, #08h ; 8 letters in 'NINTENDO'
	LD IX, #hdr_nintendo ; offset: start of 'NINTENDO' signature in game header
	LD IY, #nintendo_string ; offset 0E1Ah: start of 'NINTENDO' field in BIOS, used for checking header
check_loop:
	LD A, [IX]
	CP A, [IY] ; compare byte at IX with byte at IY
	JRL NZ, reset3 ; if they're not the same, jump down to reset3
	INC IX
	INC IY ; else, increment IX and IY to point to the next part of the 'NINTENDO' string
	DJR NZ, check_loop ; and JDBNZ back to the start of the loop
	XOR A, A ; set A to 0
	LD [BR:80h], A ; set PRC_MODE to 0
	LD [BR:81h], #07h ; set PRC_RATE to 7
	LD [BR:82h], A
	LD [BR:83h], A ; set PRC_MAP LO and MID to 0
	AND [BR:01h], #0EFh ; AND SYS_CTRL2 with ~0x10
	CARS initregs ; reset registers
	LD H, [14E1h] ; load KEY_PAD into H (loaded into 0x14E1 by reset_vector)
	LD L, [14E0h] ; load cart type into L
	LD IX, #1000h
loc_0x0164:
	LD [IX], A
	INC IX
	CP IX, #2000h
	JRS NZ, loc_0x0164 ; clear RAM
	LD IX, BA
	LD BR, A
	LD BA, HL
	LD HL, IX ; clear registers
	AND SC, #0C0h ; set flags 0-5 to 0
	JRL 2102h ; jump to game entrypoint
; ----------------------
initregs:
	LD BR, #20h
	XOR A, A
	LD B, A
	LD EP, A
	LD XP, A
	LD YP, A
	LD HL, BA
	LD IX, BA
	LD IY, BA ; set all registers to 0 and BR to 20
	RET
; ----------------------
init_io:
	LD B, #00h
	LD [BR:10h], #08h ; set SYS_BATT to 8
	AND [BR:19h], #0CFh ; AND TMR1_OSC with ~0xC0
	LD [BR:20h], B ; set IRQ_PRI1 to 0
	LD [BR:21h], #30h ; set IRQ_PRI2 to 0x30
	LD [BR:22h], #02h ; set IRQ_PRI3 to 2
	LD [BR:23h], B ; set IRQ_ENA1 to 0
	LD [BR:24h], #02h ; set IRQ_ENA2 to 2
	LD [BR:25h], B ; set IRQ_ENA3 to 0
	LD [BR:26h], B ; set IRQ_ENA4 to 0
	LD [BR:40h], B ; set TMR256_CTRL to 0
	LD [BR:44h], B ; set *unknown register* to 0
	LD [BR:50h], #0FFh ; set *unknown register* to 0xFF
	LD [BR:51h], B ; set *unknown register* to 0
	LD A, [BR:54h] ; load *unknown register* into A
	AND A, #0F8h
	OR A, #01h ; set bits 0-2 of A to 1
	LD [BR:54h], A ; store result in *unknown register*
	LD [BR:55h], #01h ; set *unknown register* to 1
	OR [BR:60h], #0Ch ; set EEPROM_DATA and EEPROM_CLK directions to output
	AND [BR:61h], #0FBh ; set EEPROM_DATA low
	OR [BR:61h], #08h
	OR [BR:61h], #04h
	LD [BR:61h], #20h
	LD [BR:60h], #32h
	LD [BR:62h], B
	LD [BR:70h], B
	LD [BR:71h], B
	RET
; ----------------------
prc_frame_copy_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h ; if cart interrupts are not enabled, 
	CARS Z, loc_0x0257 ; do something
	POP BR
	POP EP
	JRL 2108h ; jump to user irq code
; ----------------------
prc_render_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257 ; same thing here
	POP BR
	POP EP
	JRL 210Eh
; ----------------------
timer_2h_underflow_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257 ; and here
	POP BR
	POP EP
	JRL 2114h
; ----------------------
timer_2l_underflow_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257
	POP BR
	POP EP
	JRL 211Ah
; ----------------------
timer_1h_underflow_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257 ; these all do the same thing
	POP BR
	POP EP
	JRL 2120h
; ----------------------
timer_1l_underflow_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257
	POP BR
	POP EP
	JRL 2126h
; ----------------------
timer_3h_underflow_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257
	POP BR
	POP EP
	JRL 212Ch
; ----------------------
timer_3_cmp_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257
	POP BR
	POP EP
	JRL 2132h
; ----------------------
loc_0x0257: ; what does this do??? interrupts call it if cart irqs aren't enabled
	JRL intstuff2
; ----------------------
timer_32hz_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257
	POP BR
	POP EP
	JRL 2138h
; ----------------------
timer_8hz_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257
	POP BR
	POP EP
	JRL 213Eh
; ----------------------
timer_2hz_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257
	POP BR
	POP EP
	JRL 2144h
; ----------------------
timer_1hz_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257
	POP BR
	POP EP
	JRL 214Ah
; ----------------------
ir_rx_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257
	POP BR
	POP EP
	JRL 2150h
; ----------------------
shake_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257
	POP BR
	POP EP
	JRL 2156h
; ----------------------
cartridge_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, loc_0x0257
	POP BR
	POP EP
	JRL 219Eh
; ----------------------
key_right_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, intstuff1
	POP BR
	POP EP
	JRL 2162h
; ----------------------
key_left_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, intstuff1
	POP BR
	POP EP
	JRL 2168h
; ----------------------
key_down_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, intstuff1
	POP BR
	POP EP
	JRL 216Eh
; ----------------------
key_up_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, intstuff1
	POP BR
	POP EP
	JRL 2174h
; ----------------------
key_c_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, intstuff1
	POP BR
	POP EP
	JRL 217Ah
; ----------------------
key_b_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, intstuff1
	POP BR
	POP EP
	JRL 2180h
; ----------------------
key_a_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, intstuff1
	POP BR
	POP EP
	JRL 2186h
; ----------------------
unknown_irq0:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, intstuff1
	POP BR
	POP EP
	JRL 218Ch
; ----------------------
intstuff1:
	JRL intstuff2
; ----------------------
unknown_irq1:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, intstuff1
	POP BR
	POP EP
	JRL 2192h
; ----------------------
unknown_irq2:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	CARS Z, intstuff1
	POP BR
	POP EP
	JRL 2198h
; ----------------------
intstuff2:
	BIT [BR:02h], #08h
	JRS NZ, already_fast0
	PUSH SC
	LD SC, #0C0h
	CARL set_fast_speed
	POP SC
already_fast0:
	BIT [BR:71h], #04h
	JRS Z, loc_0x03A2
	BIT [BR:02h], #40h
	JRS Z, loc_0x03A2
	PUSH SC
	LD SC, #0C0h
	CARL loc_0x0B08
	BIT [BR:01h], #40h
	JRS Z, loc_0x03A1
	CARS flash0418
loc_0x03A1:
	POP SC
loc_0x03A2:
	BIT [BR:01h], #80h
	JRS Z, loc_0x03B0
	ADD SP, #0003h
	POP BR
	POP EP
	JRL 1FFDh
; ----------------------
loc_0x03B0:
	PUSH SC
	LD SC, #0C0h
	CARS flash0418
	OR [BR:01h], #20h
	POP SC
	RET
; ----------------------
key_power_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #20h
	JRS NZ, loc_0x0413
	BIT [BR:01h], #10h
	JRL NZ, reset2
	BIT [BR:02h], #08h
	JRS NZ, already_fast1
	PUSH SC
	LD SC, #0C0h
	CARL set_fast_speed
	POP SC
already_fast1:
	BIT [BR:71h], #04h
	JRS Z, loc_0x03F0
	BIT [BR:02h], #40h
	JRS Z, loc_0x03F0
	PUSH SC
	LD SC, #0C0h
	CARL loc_0x0B08
	BIT [BR:01h], #40h
	JRS Z, loc_0x03EF
	CARS flash0418
loc_0x03EF:
	POP SC
loc_0x03F0:
	BIT [BR:01h], #80h
	JRS Z, loc_0x03FF
	BIT [BR:02h], #20h
	JRS NZ, loc_0x040D
	POP BR
	POP EP
	JRL 1FFDh
; ----------------------
loc_0x03FF:
	PUSH SC
	LD SC, #0C0h
	CARS flash0418
	OR [BR:01h], #20h
	POP SC
	BIT [BR:02h], #20h
	JRS Z, loc_0x0413
loc_0x040D:
	LD [BR:29h], #80h
	POP BR
	POP EP
	RETE
; ----------------------
loc_0x0413:
	POP BR
	POP EP
	JRL 215Ch
; ----------------------
flash0418:
	PUSH IP
	PUSH BA
	PUSH HL
	BIT [BR:01h], #08h
	JRS NZ, loc_0x0429
	BIT [BR:01h], #01h
	JRS Z, loc_0x043A
	LD L, #00h
	JRS loc_0x042E
loc_0x0429:
	LD L, [BR:01h]
	AND L, #07h
loc_0x042E:
	LD XP, #07h
	LD A, #00h
	CARL flash_0507
	LD A, L
	CARL flash_053B
loc_0x043A:
	POP HL
	POP BA
	POP IP
	RET
; ----------------------
cart_ejected_irq:
	PUSH EP
	PUSH BR
	LD EP, #00h
	LD BR, #20h
	BIT [BR:01h], #30h
	JRL NZ, reset2
	BIT [BR:02h], #08h
	JRS NZ, already_fast2
	PUSH SC
	LD SC, #0C0h
	CARL set_fast_speed
	POP SC
already_fast2:
	BIT [BR:01h], #80h
	JRS Z, loc_0x0461
	BIT [BR:01h], #40h
	JRS Z, loc_0x0464
loc_0x0461:
	JRL int_shutdown
; ----------------------
loc_0x0464:
	BIT [BR:71h], #04h
	JRS Z, loc_0x0475
	BIT [BR:02h], #40h
	JRS Z, loc_0x0475
	PUSH SC
	LD SC, #0C0h
	CARL loc_0x0B08
	POP SC
loc_0x0475:
	POP BR
	POP EP
	JRL 1FFDh
; ----------------------
dev_read_ids:
	POP SC
flash_read_ids:
	PUSH SC
	LD SC, #0C0h
	PUSH EP
	PUSH HL
	CARL flash_begin_cmd
	LD HL, #5555h
	LD [HL], #90h
	LD B, [2100h]
	LD A, [2101h]
	POP HL
	POP EP
	RETE
; ----------------------
dev_reset:
	POP SC
flash_reset:
	PUSH SC
	LD SC, #0C0h
	PUSH EP
	PUSH HL
	CARL flash_begin_cmd
	LD HL, #5555h
	LD [HL], #0F0h
	POP HL
	POP EP
	RETE
; ----------------------
dev_program_byte:
	POP SC
loc_0x04A5:
	PUSH SC
	LD SC, #0C0h
	PUSH EP
	PUSH HL
	CARL flash_begin_cmd
	LD HL, #5555h
	LD [HL], #0A0h
	LD [IX], A
	LD H, #08h
loc_0x04B5:
	DEC H
	JRS NZ, loc_0x04BC
	LD A, #0FFh
	JRS loc_0x04C5
loc_0x04BC:
	LD B, [IX]
	CP A, B
	JRS NZ, loc_0x04B5
	LD B, [IX]
	CP A, B
	JRS NZ, loc_0x04B5
	XOR A, A
loc_0x04C5:
	POP HL
	POP EP
	RETE
; ----------------------
dev_erase_sector:
	LD SC, #0C0h
	PUSH EP
	PUSH HL
	CARL flash_begin_cmd
	LD HL, #5555h
	LD [HL], #80h
	LD [HL], #0AAh
	LD HL, #2AAAh
	LD [HL], #55h
	LD [IX], #30h
	LD A, #0FFh
	LD HL, #1389h
loc_0x04E2:
	DEC HL
	JRS NZ, loc_0x04E9
	LD A, #0FFh
	JRS loc_0x04F2
loc_0x04E9:
	LD B, [IX]
	CP A, B
	JRS NZ, loc_0x04E2
	LD B, [IX]
	CP A, B
	JRS NZ, loc_0x04E2
	XOR A, A
loc_0x04F2:
	POP HL
	POP EP
	RETE
; ----------------------
dev_unlock_page_register:
	POP SC
flash_cmd_D0:
	PUSH SC
	LD SC, #0C0h
	PUSH EP
	PUSH HL
	CARL flash_begin_cmd
	LD HL, #5555h
	LD [HL], #0D0h
	POP HL
	POP EP
	RETE
; ----------------------
dev_sel_bank:
	POP SC
flash_0507:
	PUSH SC
	LD SC, #0C0h
	CARL flash_cmd_D0
	PUSH IX
	LD IX, #0FFFFh
	LD [IX], A
	POP IX
	CARL flash_reset
	RETE
; ----------------------
dev_cmd_c9:
	POP SC
loc_0x0518:
	PUSH SC
	LD SC, #0C0h
	PUSH EP
	PUSH HL
	CARL flash_begin_cmd
	LD HL, #5555h
	LD [HL], #0C9h
	LD [HL], A
	POP HL
	POP EP
	RETE
; ----------------------
dev_prepare_readout:
	POP SC
flash_cmd_C0:
	PUSH SC
	LD SC, #0C0h
	PUSH EP
	PUSH HL
	CARL flash_begin_cmd
	LD HL, #5555h
	LD [HL], #0C0h
	POP HL
	POP EP
	RETE
; ----------------------
dev_sel_game:
	POP SC
flash_053B:
	PUSH SC
	LD SC, #0C0h
	PUSH IP
	PUSH IX
	PUSH IY
	PUSH HL
	LD L, #60h
	MLT
	LD IX, #1048h
	ADD IX, HL
	LD XP, #04h
	LD A, [IX]
	CP A, #08h
	JRS NC, loc_0x0556
	CARL loc_0x0518
loc_0x0556:
	SUB SP, #0008h
	LD YP, #00h
	LD IY, SP
	LD L, #00h
loc_0x0561:
	LD A, [IX+L]
	LD [IY+L], A
	INC L
	CP L, #08h
	JRS NZ, loc_0x0561
	CARL flash_cmd_D0
	LD A, #03h
	LD IX, #0FFFFh
loc_0x0573:
	LD XP, A
	LD B, [IY]
	CP B, #08h
	JRS C, loc_0x057D
	LD B, #08h
loc_0x057D:
	LD [IX], B
	INC IY
	ADD A, #04h
	CP A, #23h
	JRS NZ, loc_0x0573
	CARL flash_reset
	LD SP, IY
	POP HL
	POP IY
	POP IX
	POP IP
	RETE
; ----------------------
flash_begin_cmd:
	LD EP, #00h
	LD HL, #5555h
	LD [HL], #0AAh
	LD HL, #2AAAh
	LD [HL], #55h
	RET
; ----------------------
flash_detect:
	LD B, [5555h]
	LD A, [2AAAh]
	PUSH BA
	LD A, #0FFh
	LD [2AAAh], A
	LD [2AAAh], A
	CARL flash_reset
	CARL flash_cmd_C0
	CARL flash_read_ids
	CARL flash_reset
	CP BA, #0BFD9h
	POP BA
	JRS Z, loc_0x05CA
	LD [5555h], B
	LD [2AAAh], A
loc_0x05CA:
	LD A, [2AAAh]
	RET
; ----------------------
flash_05CF:
	CARL flash_detect
	JRS NZ, loc_0x0601
	PUSH IP
	LD XP, #07h
	LD A, #00h
	CARL flash_0507
	LD XP, #04h
	LD IX, #1300h
	LD A, [IX]
	POP IP
	BIT A, #02h
	JRS NZ, loc_0x05F6
	LD NB, #08h
	CARL 41400h
	LD [14E0h], A
	JRL nintendo_check
; ----------------------
loc_0x05F6:
	BIT A, #01h
	JRS NZ, loc_0x060A
	XOR A, A
	CARL flash_053B
	OR [BR:01h], #01h
loc_0x0601:
	LD A, #0FFh
	LD [14E0h], A
	JRL nintendo_check
; ----------------------
loc_0x060A:
	LD IX, #19D0h
	XOR A, A
loc_0x060E:
	LD [IX], A
	INC IX
	CP IX, #1C10h
	JRS NZ, loc_0x060E
	PUSH IP
	LD A, #04h
	LD XP, A
	LD YP, A
	XOR A, A
	LD [14E2h], A
	LD [14E3h], A
	LD HL, #14E4h
	LD [1524h], HL
	LD HL, #19D0h
	LD [1526h], HL
	LD IY, #1050h
loc_0x0634:
	LD A, [IY]
	OR A, A
	JRL Z, loc_0x06BA
	CP A, #0FFh
	JRL Z, loc_0x06BA
	CP A, #0FEh
	JRS Z, loc_0x0688
	LD IX, IY
	INC IX
	LD A, [IX]
	BIT A, #80h
	JRS NZ, loc_0x0657
	XOR A, A
	DEC IX
	CARL loc_0x04A5
	OR A, A
	JRL Z, loc_0x06BA
	POP IP
	JRL reset3
; ----------------------
loc_0x0657:
	LD L, #00h
	LD BA, IX
	ADD BA, #000Fh
	PUSH BA
loc_0x065F:
	LD A, [IX]
	LD B, #80h
loc_0x0662:
	BIT A, B
	JRS Z, loc_0x0677
	INC L
	SRL B
	JRS NZ, loc_0x0662
	INC IX
	POP BA
	PUSH BA
	CP BA, IX
	JRS NZ, loc_0x0675
	LD B, #80h
	JRS loc_0x0677
loc_0x0675:
	JRS loc_0x065F
loc_0x0677:
	RLC B
	CP B, #01h
	JRS NZ, loc_0x067F
	DEC IX
loc_0x067F:
	CPL B
	LD A, [IX]
	AND A, B
	LD H, A
	POP BA
	LD B, H
	DEC L
	LD A, L
loc_0x0688:
	PUSH BA
	LD A, [14E2h]
	INC A
	LD [14E2h], A
	LD HL, [1524h]
	LD A, [14E3h]
	LD [HL], A
	INC HL
	POP BA
	LD [HL], A
	INC HL
	LD [HL], B
	INC HL
	LD [HL], IX
	ADD HL, #0005h
	LD [1524h], HL
	LD HL, [1526h]
	LD IX, IY
	LD B, #48h
	SUB IX, #0050h
loc_0x06B2:
	LD [HL], [IX]
	INC HL
	INC IX
	DJR NZ, loc_0x06B2
	LD [1526h], HL
loc_0x06BA:
	ADD IY, #0060h
	LD A, [14E3h]
	INC A
	LD [14E3h], A
	CP A, #08h
	JRL NZ, loc_0x0634
	POP IP
	LD A, [14E2h]
	OR A, A
	JRS NZ, loc_0x06D6
	JRL reset3
; ----------------------
loc_0x06D6:
	OR [BR:01h], #08h
	JRL loc_0x0C0E
; ----------------------
loc_0x06DC:
	SLL A
	SLL A
	SLL A
	LD B, #00h
	LD IY, #14E4h
	ADD IY, BA
	LD H, [IY]
	INC IY
	LD B, [IY]
	LD [14E0h], B
	CP B, #0FEh
	JRS Z, loc_0x0706
	INC IY
	LD A, [IY]
	INC IY
	LD IX, [IY]
	PUSH IP
	LD XP, #04h
	CARL loc_0x04A5
	POP IP
	OR A, A
	JRL NZ, reset3
loc_0x0706:
	LD B, [BR:01h]
	LD A, H
	OR A, B
	LD [BR:01h], A
	LD A, H
	CARL flash_053B
	JRL nintendo_check
; ----------------------
suspend_system:
	PUSH EP
	PUSH BR
	LD SC, #0C0h
	CARL set_io_base
	OR [BR:02h], #20h
	LD A, [BR:80h]
	PUSH BA
	LD B, [BR:50h]
	LD A, [BR:21h]
	AND A, #0Ch
	PUSH BA
	LD B, [BR:23h]
	LD A, [BR:24h]
	PUSH BA
	LD B, [BR:25h]
	LD A, [BR:26h]
	PUSH BA
loc_0x0731:
	LD [BR:50h], #80h
	LD [BR:54h], #01h
	LD [BR:23h], #00h
	LD [BR:24h], #00h
	LD [BR:25h], #80h
	LD [BR:26h], #00h
	OR [BR:21h], #0Ch
	CARL loc_0x0BCA
	LD [BR:29h], #80h
	LD A, #80h
	CARL loc_0x07C0
	CARL loc_0x0859
	AND [BR:02h], #0DFh
	POP BA
	LD [BR:26h], A
	LD [BR:25h], B
	POP BA
	LD [BR:23h], B
	BIT [BR:01h], #40h
	JRS Z, loc_0x0766
	OR A, #02h
loc_0x0766:
	LD [BR:24h], A
	POP A
	LD B, [BR:21h]
	AND B, #0F3h
	OR A, B
	LD [BR:21h], A
	POP B
	LD [BR:50h], B
	POP BA
	LD [BR:80h], A
	POP BR
	POP EP
	RETE
; ----------------------
sleep:
	PUSH EP
	PUSH BR
	LD SC, #0C0h
	CARL set_io_base
	LD A, #40h
	CARL loc_0x07C0
	POP BR
	POP EP
	RETE
; ----------------------
sleep_with_display:
	PUSH EP
	PUSH BR
	LD SC, #0C0h
	CARL set_io_base
	AND [BR:80h], #0F7h
	LD A, #40h
	CARL loc_0x07C3
	POP BR
	POP EP
	RETE
; ----------------------
shutdown:
int_shutdown:
	LD SC, #0C0h
	LD SP, #2000h
	CARL set_io_base
	CARL init_io
loc_0x07A9:
	LD SC, #0C0h
	LD [BR:01h], #90h
	JRL loc_0x0731
; ----------------------
unknown_eject0:
	PUSH EP
	PUSH BR
	CARL set_io_base
	LD SC, #0C0h
	LD A, #40h
	CARL loc_0x07C0
	POP BR
	POP EP
	RETE
; ----------------------
loc_0x07C0:
	CARL loc_0x08D6
loc_0x07C3:
	BIT [BR:01h], #80h
	JRS Z, loc_0x07CD
	BIT [BR:01h], #40h
	JRS Z, loc_0x07D3
loc_0x07CD:
	OR [BR:24h], #02h
	OR [BR:21h], #30h
loc_0x07D3:
	AND [BR:51h], #0FDh
	LD [BR:55h], #01h
	AND [BR:01h], #0DFh
	CARL loc_0x0AF5
	CARL loc_0x0AD9
	LD SC, A
	HALT
	LD SC, #0C0h
	RET
; ----------------------
default_contrast:
	POP SC
loc_0x07EA:
	SLL A
	SLL A
	PUSH EP
	PUSH HL
	LD EP, #00h
	LD HL, #2000h
	AND [HL], #03h
	OR [HL], A
	POP HL
	POP EP
	CARL loc_0x0822
	JRS loc_0x0831
change_contrast:
	CARL loc_0x0822
	POP SC
	PUSH SC
	JRS Z, loc_0x0812
	CP A, #03Fh
	JRS Z, loc_0x0815
	INC A
loc_0x080E:
	CARS loc_0x07EA
	XOR A, A
	RETE
; ----------------------
loc_0x0812:
	OR A, A
	JRS NZ, loc_0x0818
loc_0x0815:
	LD A, #0FFh
	RETE
; ----------------------
loc_0x0818:
	DEC A
	JRS loc_0x080E
apply_default_contrast:
	POP SC
apply_default_contrast1:
	CARL loc_0x0822
	JRS loc_0x0831
get_default_contrast:
	POP SC
loc_0x0822:
	PUSH EP
	PUSH BR
	CARL set_io_base
	LD A, [BR:00h]
	SRL A
	SRL A
	POP BR
	POP EP
	RET
; ----------------------
set_temp_contast:
	POP SC
loc_0x0831:
	PUSH EP
	PUSH BR
	CARL set_io_base
	LD B, A
	BIT [BR:80h], #08h
	LD A, SC
	AND [BR:80h], #0F7h
	LD [BR:0FEh], #81h
	LD [BR:0FEh], B
	LD SC, A
	JRS Z, loc_0x084B
	OR [BR:80h], #08h
loc_0x084B:
	POP BR
	POP EP
	RET
; ----------------------
lcd_on:
	POP SC
	PUSH EP
	PUSH BR
	CARL set_io_base
	CARS loc_0x0859
	POP BR
	POP EP
	RET
; ----------------------
loc_0x0859:
	PUSH SC
	LD SC, #0C0h
	BIT [BR:02h], #04h
	JRS Z, loc_0x0866
	OR [BR:02h], #10h
	JRS loc_0x0869
loc_0x0866:
	AND [BR:02h], #0EFh
loc_0x0869:
	OR [BR:81h], #01h
	XOR A, A
	CARL init_display1
	RETE
; ----------------------
init_lcd:
	POP SC
	PUSH EP
	PUSH BR
	CARL set_io_base
	CARS init_display
	POP BR
	POP EP
	RET
; ----------------------
init_display:
	LD A, #0FFh
init_display1:
	PUSH SC
	LD SC, #0C0h
	BIT [BR:81h], #01h
	JRS NZ, loc_0x0887
	RETE
; ----------------------
loc_0x0887:
	PUSH HL
	LD HL, #20FEh
	LD B, [BR:80h]
	AND [BR:80h], #0F7h
	LD [HL], #0E3h
	LD [HL], #0A4h
	LD [HL], #0ADh
	LD [HL], #02h
	LD [HL], #0EEh
	LD [HL], #40h
	LD [HL], #0A2h
	LD [HL], #0A0h
	LD [HL], #0C0h
	LD [HL], #0A6h
	LD [HL], #02Fh
	OR A, A
	JRS NZ, loc_0x08C5
	PUSH IX
	BIT [BR:02h], #08h
	JRS NZ, loc_0x08B6
	LD A, #01h
	LD IX, #0592h
	JRS loc_0x08BB
loc_0x08B6:
	LD A, #02h
	LD IX, #55C4h
loc_0x08BB:
	DEC IX
	JRS NZ, loc_0x08BB
	LD IX, #0FFFFh
	DEC A
	JRS NZ, loc_0x08BB
	POP IX
loc_0x08C5:
	LD [HL], #0AFh
	LD [BR:80h], B
	POP HL
	RETE
; ----------------------
lcd_off:
	POP SC
	PUSH EP
	PUSH BR
	CARL set_io_base
	CARS loc_0x08D6
	POP BR
	POP EP
	RET
; ----------------------
loc_0x08D6:
	PUSH SC
	LD SC, #0C0h
	AND [BR:80h], #0F7h
	LD [BR:0FEh], #0AEh
	LD [BR:0FEh], #0ACh
	LD [BR:0FEh], #28h
	LD [BR:0FEh], #0A5h
	AND [BR:81h], #0FEh
	RETE
; ----------------------
ena_ram_vec:
	PUSH EP
	PUSH BR
	CARL set_io_base
	LD SC, #0C0h
	BIT [BR:01h], #80h
	JRS NZ, loc_0x0901
	OR [BR:01h], #80h
	OR [BR:01h], #40h
	AND [BR:01h], #0DFh
loc_0x0901:
	POP BR
	POP EP
	RETE
; ----------------------
dis_ram_vec:
	PUSH EP
	PUSH BR
	CARL loc_0x0939
	LD [BR:55h], #01h
	AND [BR:51h], #0FDh
	LD SC, #0C0h
	OR [BR:21h], #30h
	OR [BR:24h], #02h
	OR [BR:01h], #20h
	AND [BR:01h], #0BFh
	AND [BR:01h], #7Fh
	POP BR
	POP EP
	RETE
; ----------------------
dis_irq_13:
	PUSH EP
	PUSH BR
	CARL loc_0x0939
	AND [BR:24h], #0FDh
	POP BR
	POP EP
	RETE
; ----------------------
ena_irq_13:
	PUSH EP
	PUSH BR
	CARL loc_0x0939
	OR [BR:24h], #02h
	POP BR
	POP EP
	RETE
; ----------------------
loc_0x0939:
	CARL set_io_base
	BIT [BR:01h], #40h
	JRS NZ, loc_0x0948
	ADD SP, #0003h
	POP BR
	POP EP
	RETE
; ----------------------
loc_0x0948:
	RET
; ----------------------
unknown_eject1:
	PUSH EP
	PUSH BR
	CARL set_io_base
	LD SC, #0C0h
	BIT [BR:01h], #80h
	JRS NZ, loc_0x095E
	AND [BR:24h], #0FDh
	OR [BR:01h], #80h
	AND [BR:01h], #0DFh
loc_0x095E:
	POP BR
	POP EP
	RETE
; ----------------------
unknown_eject2:
	PUSH EP
	PUSH BR
	CARL loc_0x0A1A
	LD [BR:55h], #01h
	AND [BR:51h], #0FDh
	LD SC, #0C0h
	OR [BR:21h], #30h
	OR [BR:24h], #02h
	OR [BR:01h], #20h
	AND [BR:01h], #7Fh
	POP BR
	POP EP
	RETE
; ----------------------
dev_card0:
	PUSH EP
	PUSH BR
	LD SC, #0C0h
	CARL loc_0x0A1A
	PUSH IX
	PUSH HL
	BIT [BR:53h], #02h
	JRS Z, loc_0x098F
	LD A, #01h
	JRS loc_0x09DF
loc_0x098F:
	LD B, [BR:80h]
	LD [BR:80h], #00h
	LD A, [BR:71h]
	PUSH BA
	CARL loc_0x0B08
	CARL loc_0x0BCA
	LD [BR:28h], #02h
	CARL loc_0x0A2F
	JRS NZ, loc_0x09AC
	BIT [BR:01h], #08h
	JRS NZ, loc_0x09D8
	JRS loc_0x09D1
loc_0x09AC:
	BIT [BR:01h], #08h
	JRS Z, loc_0x09D8
	LD A, [BR:01h]
	AND A, #07h
	LD L, #60h
	MLT
	LD IX, #1050h
	ADD IX, HL
	PUSH IP
	LD XP, #04h
	LD B, [IX]
	POP IP
	CP B, #00h
	JRS Z, loc_0x09D8
	CP B, #0FFh
	JRS Z, loc_0x09D8
	CARL flash_053B
loc_0x09D1:
	OR [BR:02h], #40h
	POP BA
	XOR A, A
	JRS loc_0x09DD
loc_0x09D8:
	POP BA
	LD [BR:71h], A
	LD A, #02h
loc_0x09DD:
	LD [BR:80h], B
loc_0x09DF:
	POP HL
	POP IX
	POP BR
	POP EP
	RETE
; ----------------------
dev_card1:
	PUSH EP
	PUSH BR
	LD SC, #0C0h
	CARL loc_0x0A1A
	LD B, [BR:80h]
	LD [BR:80h], #00h
	PUSH B
	PUSH IX
	PUSH HL
	BIT [BR:53h], #02h
	JRS Z, loc_0x09FD
	LD A, #01h
	JRS loc_0x0A11
loc_0x09FD:
	CARL loc_0x0B05
	CARL loc_0x0A2F
	JRS Z, loc_0x0A11
	PUSH IP
	LD XP, #07h
	LD A, #01h
	CARL flash_0507
	POP IP
	LD A, #0FFh
loc_0x0A11:
	POP HL
	POP IX
	POP B
	LD [BR:80h], B
	POP BR
	POP EP
	RETE
; ----------------------
loc_0x0A1A:
	CARL set_io_base
	BIT [BR:01h], #80h
	JRS Z, loc_0x0A27
	BIT [BR:01h], #40h
	JRS Z, loc_0x0A2E
loc_0x0A27:
	ADD SP, #0003h
	POP BR
	POP EP
	RETE
; ----------------------
loc_0x0A2E:
	RET
; ----------------------
loc_0x0A2F:
	CARL flash_detect
	JRS NZ, loc_0x0A4D
	PUSH IP
	LD XP, #07h
	LD A, #00h
	CARL flash_0507
	LD XP, #04h
	LD IX, #1300h
	LD A, [IX]
	POP IP
	BIT A, #01h
	JRS NZ, loc_0x0A4E
	XOR A, A
	CARL flash_053B
loc_0x0A4D:
	XOR A, A
loc_0x0A4E:
	RET
; ----------------------
unknown_eject3:
	POP SC
	PUSH EP
	PUSH BR
	CARL set_io_base
	SWAP A
	AND A, #30h
	PUSH SC
	LD SC, #0C0h
	LD B, [BR:21h]
	AND B, #0CFh
	OR A, B
	LD [BR:21h], A
	POP SC
	LD [BR:55h], #01h
	AND [BR:51h], #0FDh
	CARL loc_0x0BCA
	LD [BR:28h], #02h
	OR [BR:24h], #02h
	POP BR
	POP EP
	RET
; ----------------------
dis_cart_eject:
	PUSH EP
	PUSH BR
	CARL set_io_base
	AND [BR:24h], #0FDh
	POP BR
	POP EP
	RETE
; ----------------------
unknown_eject4:
	POP SC
	PUSH EP
	PUSH BR
	PUSH BA
	CARL set_io_base
	LD A, SC
	SRL A
	SRL A
	AND A, #30h
	LD B, [BR:21h]
	AND B, #30h
	CP A, B
	XOR SC, #01h
	JRS Z, loc_0x0AA2
	BIT [BR:28h], #02h
	JRS Z, loc_0x0AA2
	LD [BR:28h], #02h
loc_0x0AA2:
	POP BA
	POP BR
	POP EP
	RET
; ----------------------
inc_cpu_speed:
	PUSH EP
	PUSH BR
	CARL set_io_base
	LD SC, #0C0h
	CARS set_fast_speed
	POP BR
	POP EP
	RETE
; ----------------------
set_fast_speed:
	PUSH IX
	AND [BR:02h], #0FEh
	LD IX, #0014h
loc_0x0AB9:
	DEC IX
	JRS NZ, loc_0x0AB9
	OR [BR:02h], #04h
	LD IX, #0199h
loc_0x0AC2:
	DEC IX
	JRS NZ, loc_0x0AC2
	OR [BR:02h], #08h
	OR [BR:02h], #10h
	POP IX
	RET
; ----------------------
recover_inc_cpu:
	PUSH EP
	PUSH BR
	CARL set_io_base
	LD SC, #0C0h
	CARS loc_0x0AD9
	POP BR
	POP EP
	RETE
; ----------------------
loc_0x0AD9:
	AND [BR:02h], #0EFh
	AND [BR:02h], #0F7h
	AND [BR:02h], #0FBh
	OR [BR:02h], #01h
	RET
; ----------------------
cart_off_update0:
	PUSH EP
	PUSH BR
	CARL set_io_base
	LD SC, #0C0h
	CARS loc_0x0AF2
	POP BR
	POP EP
	RETE
; ----------------------
loc_0x0AF2:
	AND [BR:02h], #0BFh
loc_0x0AF5:
	OR [BR:71h], #04h
	RET
; ----------------------
cart_off_update1:
	PUSH EP
	PUSH BR
	CARL set_io_base
	LD SC, #0C0h
	CARS loc_0x0B05
	POP BR
	POP EP
	RETE
; ----------------------
loc_0x0B05:
	OR [BR:02h], #40h
loc_0x0B08:
	PUSH IX
	PUSH BA
	AND [BR:71h], #0FBh
	OR [BR:02h], #80h
	LD IX, #0032h
loc_0x0B13:
	DEC IX
	JRS NZ, loc_0x0B13
	LD A, [2AAAh]
	OR [BR:02h], #80h
	POP BA
	POP IX
	RET
; ----------------------
cart_detect:
	POP SC
	PUSH EP
	PUSH BR
	CARL set_io_base
	BIT [BR:53h], #02h
	XOR SC, #01h
	POP BR
	POP EP
	RET
; ----------------------
read_structure:
	PUSH EP
	PUSH BR
	CARL set_io_base
	PUSH IP
	PUSH IX
	PUSH IY
	PUSH HL
	PUSH B
	LD SC, #0C0h
	LD A, [IX]
	BIT A, #01h
	LD A, SC
	JRS Z, loc_0x0B4E
	ADD IX, #000Ah
	LD H, [IX]
	DEC IX
	LD L, [IX]
	DEC IX
	PUSH HL
	LD B, [IX]
	DEC IX
	JRS loc_0x0B51
loc_0x0B4E:
	ADD IX, #0007h
loc_0x0B51:
	PUSH BA
	LD B, [IX]
	DEC IX
	LD A, [IX]
	DEC IX
	LD H, [IX]
	DEC IX
	LD L, [IX]
	DEC IX
	LD YP, A
	LD IY, HL
	LD A, [IX]
	DEC IX
	LD H, [IX]
	DEC IX
	LD L, [IX]
	LD XP, A
	LD IX, HL
	OR [BR:02h], #80h
	LD [IX], #0FFh
	OR [BR:02h], #80h
	LD A, [IY]
	OR [BR:02h], #80h
	CP A, B
	POP BA
	PUSH SC
	LD SC, A
	JRS Z, loc_0x0B82
	POP SC
	LD L, B
	POP BA
	LD H, A
	LD A, B
	PUSH SC
	CARS loc_0x0B8C
loc_0x0B82:
	POP BA
	AND A, #01h
	POP HL
	POP IY
	POP IX
	POP IP
	POP BR
	POP EP
	RETE
; ----------------------
loc_0x0B8C:
	LD NB, A
	JP HL
; ----------------------
set_prc_rate:
	PUSH EP
	PUSH HL
	AND A, #07h
	SLL A
	LD EP, #00h
	LD HL, #2081h
	AND [HL], #0F1h
	OR [HL], A
	POP HL
	POP EP
	RETE
; ----------------------
get_prc_rate:
	PUSH EP
	PUSH BR
	CARL set_io_base
	LD A, [BR:81h]
	AND A, #0Eh
	SRL A
	POP BR
	POP EP
	RETE
; ----------------------
test_cart_type:
	POP SC
	PUSH EP
	PUSH BR
	CARL set_io_base
	BIT [BR:01h], #08h
	POP BR
	POP EP
	RET
; ----------------------
ir_pulse:
	LD [IY], #02h
loc_0x0BBF:
	DJR NZ, loc_0x0BBF
	LD [IY], #00h
	RETE
; ----------------------
set_io_base:
	LD EP, #00h
	LD BR, #20h
	RET
; ----------------------
loc_0x0BCA:
	PUSH IX
	LD IX, #07CBh
loc_0x0BCE:
	DEC IX
	JRS NZ, loc_0x0BCE
	POP IX
	RET
; ----------------------
read_keys_buffer:
	LD B, [BR:52h]
	CPL B
	LD A, H
	LD H, B
	XOR A, B
	AND A, B
	RET
; ----------------------
load_tilemap:
	LD IX, #1360h
	LD L, #00h
loc_0x0BE1:
	LD B, [IY+L]
	LD [IX+L], B
	INC L
	CP L, #60h
	JRS NZ, loc_0x0BE1
	RET
; ----------------------
load_middle_5_tilemap:
	LD IX, #1378h
	LD L, #00h
	AND [BR:80h], #0F7h ; disable frame copy
loc_0x0BF4:
	LD B, [IY+L]
	LD [IX+L], B
	INC L
	CP L, #3Ch
	JRS NZ, loc_0x0BF4
	RET
; ----------------------
loc_0x0BFF:
	LD [BR:27h], #80h
	OR [BR:80h], #08h
loc_0x0C05:
	BIT [BR:27h], #80h
	JRS Z, loc_0x0C05
	AND [BR:80h], #0F7h
	RET
; ----------------------
loc_0x0C0E:
	DEC A
	LD L, #0Ch
	MLT
	LD [152Ah], L
	CP L, #30h
	JRS C, loc_0x0C1E
	LD L, #30h
loc_0x0C1E:
	LD [1529h], L
	LD IY, #1590h
	CARL load_tilemap
	LD IX, #1528h
	LD IY, #152Bh
	XOR A, A
	LD [152Ch], A
	LD A, [BR:52h]
	CPL A
	LD H, A
	XOR A, A
	LD L, A
	LD [IX], A
	CARL loc_0x0CCC
loc_0x0C3E:
	LD [BR:27h], #40h
loc_0x0C41:
	BIT [BR:27h], #40h
	JRS Z, loc_0x0C41
	CARL init_display
	CARL apply_default_contrast1
	CARL read_keys_buffer
	LD B, A
	LD A, [152Ch]
	OR A, B
	LD [152Ch], A
	EX A, B
	OR A, A
	JRS Z, loc_0x0C61
	LD [IY], #0Dh
	JRS loc_0x0C6C
loc_0x0C61:
	LD A, H
	AND A, B
	JRS Z, loc_0x0C6F
	LD B, [IY]
	DEC B
	LD [IY], B
	JRS NZ, loc_0x0C6F
	LD [IY], #05h
loc_0x0C6C:
	CARL loc_0x0C71
loc_0x0C6F:
	JRS loc_0x0C3E
loc_0x0C71:
	BIT A, #05h
	JRS Z, loc_0x0C8B
	LD H, #00h
	LD A, #0Ch
	DIV
	LD A, L
	AND [BR:80h], #0F7h
	LD IY, #1530h
	CARL load_tilemap
	CARL loc_0x0BFF
	JRL loc_0x06DC
; ----------------------
loc_0x0C8B:
	BIT A, #82h
	JRS Z, loc_0x0C92
	JRL loc_0x07A9
; ----------------------
loc_0x0C92:
	BIT A, #08h
	JRS Z, loc_0x0CAA
	LD A, L
	OR A, A
	JRS Z, loc_0x0CCB
	SUB A, #0Ch
	LD L, A
	OR A, A
	LD A, [IX]
	JRS Z, loc_0x0CA8
	LD B, L
	CP A, B
	JRS NZ, loc_0x0CA8
	SUB A, #0Ch
	LD [IX], A
loc_0x0CA8:
	JRS loc_0x0CC8
loc_0x0CAA:
	BIT A, #10h
	JRS Z, loc_0x0CCB
	LD A, L
	LD B, [152Ah]
	CP A, B
	JRS Z, loc_0x0CCB
	ADD A, #0Ch
	LD L, A
	CP A, B
	LD A, [IX]
	JRS Z, loc_0x0CC8
	ADD A, [1529h]
	LD B, L
	CP A, B
	LD A, [IX]
	JRS NZ, loc_0x0CC8
	ADD A, #0Ch
	LD [IX], A
loc_0x0CC8:
	CARL loc_0x0CCC
loc_0x0CCB:
	RET
; ----------------------
loc_0x0CCC:
	PUSH HL
	PUSH IX
	PUSH IY
	LD H, L
	LD IY, #15F0h
	LD B, #00h
	ADD IY, BA
	CARL load_middle_5_tilemap
	LD IY, #1372h
	OR A, A
	JRS Z, loc_0x0CE4
	LD [IY], #21h
	JRS loc_0x0CE6
loc_0x0CE4:
	LD [IY], #1Fh
loc_0x0CE6:
	LD B, A
	ADD A, [1529h]
	LD IY, #13BAh
	CP A, [152Ah]
	JRS Z, loc_0x0CF6
	LD [IY], #2Ch
	JRS loc_0x0CF8
loc_0x0CF6:
	LD [IY], #2Ah
loc_0x0CF8:
	LD A, H
	SUB A, B
	ADD A, #01h
	LD B, #00h
	ADD IX, BA
	LD [IX], #0Bh
	OR [BR:80h], #08h
	POP IY
	POP IX
	POP HL
	RET
; ----------------------
loc_0x0D09:
	PUSH IX
	PUSH IY
	LD IY, #1530h
	CARL load_tilemap
	POP IY
	POP IX
	LD A, [IX]
	INC IX
	LD B, [IX]
	SRL B
	LD L, B
	LD B, #00h
	RL B
	LD IX, #152Dh
	LD [IX], BA
	LD [BR:27h], #40h
loc_0x0D25:
	BIT [BR:27h], #40h
	JRS Z, loc_0x0D25
	LD [BR:27h], #40h
	LD A, [BR:52h]
	CPL A
	LD H, A
	PUSH L
loc_0x0D34:
	DEC L
	LD B, [IY+L]
	DEC L
	LD A, [IY+L]
	JRS NZ, loc_0x0D40
	POP L
	PUSH L
loc_0x0D40:
	SRL B
	LD [152Fh], B
	LD B, #00h
	RL B
	PUSH HL
	PUSH IX
	PUSH IY
	LD IY, #1650h
	ADD IY, BA
	CARL load_middle_5_tilemap
	OR [BR:80h], #08h
	POP IY
	POP IX
	POP HL
loc_0x0D5B:
	BIT [BR:27h], #40h
	JRS Z, loc_0x0D5B
	LD [BR:27h], #40h
	CARL init_display
	CARL apply_default_contrast1
	CARL read_keys_buffer
	BIT A, #87h
	JRS NZ, loc_0x0D84
loc_0x0D70:
	LD BA, [IX]
	DEC BA
	LD [IX], BA
	JRS Z, loc_0x0D84
	LD A, [152Fh]
	DEC A
	LD [152Fh], A
	JRS NZ, loc_0x0D5B
	JRS loc_0x0D34
loc_0x0D84:
	POP B
	RET
; ----------------------
loc_0x0D87:
	LD IX, #img_e36
	LD IY, #unknown_data
	CARL loc_0x0D09
	JRS Z, loc_0x0D99
	BIT A, #82h
	JRS Z, loc_0x0D99
	JRL loc_0x07A9
; ----------------------
loc_0x0D99:
	AND [BR:80h], #0F7h
	LD IY, #1530h
	CARL load_tilemap
	CARL loc_0x0BFF
	RET
; ----------------------
reset3:
	LD SC, #0C0h
	OR [BR:71h], #04h
	LD IX, #0E3Eh
	LD IY, #0E38h
	CARL loc_0x0D09
loc_0x0DB4:
	JRS Z, loc_0x0DC4
	BIT A, #82h
	JRS NZ, loc_0x0DC4
	BIT [BR:53h], #02h
	JRL Z, reset2
	CARS loc_0x0DC7
	JRS loc_0x0DB4
; ----------------------
loc_0x0DC4:
	JRL loc_0x07A9
; ----------------------
loc_0x0DC7:
	PUSH B
	JRL loc_0x0D70
; ----------------------
decode_picture: ; decode encoded picture from 0x0E40 to RAM 0x1530
	LD IY, #imgdata ; source
	LD IX, #1530h ; destination
loop_decode:
	LD A, [IY] ; read encoded byte
	INC IY ; increment offset
	CP A, #0F9h ; compare value to 0xF9
	JRS NZ, notF9 ; if it isn't, jump to notF9
	LD B, [IY] ; value after F9 is number of 0s to fill - 1
	INC IY ; inc offset
	INC B ; add 1 to find actual number of 0s
	XOR A, A ; set A to 0
zero_fill_loop:
	LD [IX], A ; store 0 in destination offset
	INC IX ; inc dest offset
	DJR NZ, zero_fill_loop ; dec B and loop if not 0
	JRS loop_next
notF9:
	CP A, #0FBh ; compare value to 0xFB
	JRS NZ, normalbyte ; if it's not, continue as normal byte to write
	LD A, [IY] ; otherwise, store next source byte in A
	INC IY ; inc offset
	LD B, [IY] ; next source byte into B
	INC IY ; increment source offset
	INC B ; and B
fill_loop:
	LD [IX], A ; store A in destination offset
	INC IX ; increment destination
	DJR NZ, fill_loop ; dec B and loop if not 0
	JRS loop_next ; end of fill section
normalbyte:
	LD [IX], A ; store A in destination offset
	INC IX ; increment destination offset
loop_next:
	CP IY, #1000h ; if not all 0x1C0 bytes have been decoded yet, 
	JRS NZ, loop_decode ; go back to the decode loop
	LD IX, #1920h ; else
	LD IY, #1978h
loc_0x0DFE:
	LD A, [IX]
	LD L, #08h
loc_0x0E01: ; do *something* 0x58 times
	RL A
	RR B
	DEC L
	JRS NZ, loc_0x0E01
	LD [IY], B
	INC IX
	INC IY
	CP IX, #1978h
	JRS NZ, loc_0x0DFE
	RET
; ----------------------
	DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh
; ----------------------
nintendo_string:
	ASCII "NINTENDO"
; ----------------------
unknown_data:
	DB 68h, 6Fh, 0A4h, 13h, 68h, 13h, 0A4h, 13h, 68h, 13h, 0A4h, 13h, 68h, 13h, 2Ch, 13h
	DB 0F0h, 12h, 0B4h, 12h

img_e36:
	DB 98h, 29h, 78h, 0Ch, 3Ch, 18h, 00h, 3Ch, 20h, 0Dh

imgdata:
	DB 0F9h, 60h, 01h, 02h, 03h, 04h, 05h, 06h, 07h, 08h, 09h, 0Ah, 00h, 1Eh, 0FBh, 1Fh
	DB 09h, 20h, 0F9h, 3Bh, 29h, 0FBh, 2Ah, 09h, 2Bh, 0Ch, 00h, 34h, 35h, 36h, 37h, 38h
	DB 39h, 3Ah, 3Bh, 3Ch, 0Dh, 0Ch, 00h, 3Dh, 3Eh, 3Fh, 40h, 41h, 42h, 43h, 44h, 45h
	DB 0Dh, 0Ch, 00h, 46h, 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 0Dh, 0Ch, 00h, 4Fh
	DB 50h, 51h, 52h, 53h, 54h, 55h, 56h, 57h, 0Dh, 0Ch, 00h, 58h, 59h, 5Ah, 5Bh, 5Ch
	DB 5Dh, 5Eh, 5Fh, 60h, 0Dh, 0Ch, 00h, 61h, 62h, 63h, 64h, 65h, 66h, 67h, 68h, 69h
	DB 0Dh, 0Ch, 00h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h, 71h, 72h, 0Dh, 0Ch, 00h, 73h
	DB 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 7Bh, 0Dh, 0F9h, 0Fh, 12h, 13h, 14h, 15h, 0F9h
	DB 7h, 16h, 17h, 18h, 19h, 0F9h, 7h, 1Ah, 1Bh, 1Ch, 1Dh, 0F9h, 14h, 0Eh, 0Fh, 0F9h
	DB 8h, 12h, 13h, 14h, 15h, 0F9h, 7h, 16h, 17h, 18h, 19h, 0F9h, 7h, 1Ah, 1Bh, 1Ch
	DB 1Dh, 0F9h, 14h, 10h, 11h, 0F9h, 08h, 12h, 13h, 14h, 15h, 0F9h, 07h, 16h, 17h, 18h
	DB 19h, 0F9h, 07h, 1Ah, 1Bh, 1Ch, 1Dh, 0F9h, 1Fh, 22h, 23h, 23h, 24h, 0F9h, 07h, 2Dh
	DB 2Eh, 2Eh, 2Fh, 0F9h, 2Bh, 25h, 26h, 23h, 24h, 0F9h, 07h, 30h, 31h, 2Eh, 2Fh, 0F9h
	DB 2Bh, 25h, 27h, 26h, 24h, 0F9h, 07h, 30h, 32h, 31h, 2Fh, 0F9h, 2Bh, 25h, 27h, 27h
	DB 28h, 0F9h, 07h, 30h, 32h, 32h, 33h, 0F9h, 65h, 7Ch, 0FEh, 82h, 92h, 0F6h, 74h, 00h
	DB 0F0h, 0FCh, 26h, 26h, 0FCh, 0F0h, 00h, 0FEh, 0FEh, 08h, 10h, 08h, 0FEh, 0FEh, 00h, 0FEh
	DB 0FEh, 92h, 92h, 92h, 0F9h, 03h, 0CCh, 0DEh, 92h, 0F6h, 66h, 00h, 0FEh, 0FEh, 92h, 92h
	DB 92h, 00h, 0FEh, 0FEh, 80h, 80h, 80h, 00h, 0FEh, 0FEh, 92h, 92h, 92h, 00h, 7Ch, 0FEh
	DB 82h, 82h, 0C6h, 44h, 00h, 02h, 02h, 0FEh, 0FEh, 02h, 02h, 0F9h, 07h, 0FEh, 7Ch, 38h
	DB 10h, 0F9h, 05h, 0FFh, 0F9h, 05h, 0FFh, 0F9h, 04h, 0F0h, 0FBh, 08h, 0Bh, 0F0h, 00h, 00h
	DB 80h, 0FBh, 40h, 0Bh, 80h, 0F9h, 06h, 0F8h, 04h, 82h, 0E1h, 0E1h, 31h, 31h, 0FBh, 39h
	DB 05h, 31h, 31h, 0E1h, 0E1h, 82h, 06h, 0FAh, 04h, 0F8h, 0F9h, 08h, 0FCh, 03h, 00h, 7h
	DB 0DFh, 0DFh, 30h, 30h, 0FBh, 70h, 05h, 30h, 30h, 1Fh, 9Fh, 87h, 00h, 03h, 0FDh, 0F9h
	DB 09h, 07h, 08h, 13h, 13h, 2Fh, 2Fh, 23h, 23h, 0FBh, 20h, 05h, 46h, 46h, 40h, 81h
	DB 81h, 80h, 40h, 3Fh, 0F9h, 08h, 0FEh, 0FBh, 02h, 0Dh, 0FEh, 0F9h, 03h, 02h, 22h, 32h
	DB 3Ah, 3Ah, 32h, 22h, 02h, 0E0h, 20h, 0BCh, 84h, 0F4h, 0F4h, 04h, 0F4h, 0F4h, 0F4h, 04h
	DB 0F4h, 0F4h, 0F4h, 04h, 0F4h, 0F4h, 0F4h, 04h, 0F4h, 0F4h, 0F4h, 04h, 0FCh, 0E0h, 20h, 3Ch
	DB 0FBh, 04h, 07h, 0F4h, 0F4h, 0F4h, 04h, 0F4h, 0FBh, 04h, 0Ah, 0F4h, 0F4h, 0F4h, 04h, 0FCh
{%- endasm %}
